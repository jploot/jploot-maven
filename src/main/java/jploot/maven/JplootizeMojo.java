package jploot.maven;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.model.Resource;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;

@Mojo(name = "jplootize", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresProject = true)
public class JplootizeMojo extends AbstractMojo {

	@Parameter(defaultValue = "${project.build.directory}/jplootize/", required = true)
	private String outputDirectory;

	@Parameter
	private String applicationName;

	@Parameter
	private String applicationDescription;

	@Parameter
	private String mainClass;

	@Parameter(defaultValue = "${project}", readonly = true)
	private MavenProject project;

	@Override
	public void execute() throws MojoExecutionException, MojoFailureException {
		try {
			Path metaInfPath = Path.of(outputDirectory).resolve("META-INF/jploot");
			Path propertiesFilePath = metaInfPath.resolve("jploot.properties");
			createDirIfNotExists(propertiesFilePath);
			List<String> classpathDependencies = new ArrayList<>();
			for (Artifact artifact : project.getArtifacts()) {
				if (artifact.getArtifactHandler().isAddedToClasspath()) {
					classpathDependencies.add(String.format(
							"%s:%s:%s:%s:%s",
							artifact.getGroupId(),
							artifact.getArtifactId(),
							// getVersion is a timestamp for snapshots
							artifact.getBaseVersion(),
							artifact.getType(),
							artifact.getClassifier() != null ? artifact.getType() : ""
							));
				}
			}
			// TODO: which format? YAML?
			Properties properties = new Properties();
			properties.put("format", String.valueOf(1));
			// TODO: ':' are escaped
			properties.put("classpathDependencies", String.join(" ",classpathDependencies));
			properties.put("applicationName", applicationName);
			properties.put("applicationDescription", applicationDescription);
			properties.put("mainClass", mainClass);
			try (Writer writer = new FileWriter(propertiesFilePath.toFile())) {
				properties.store(writer, "generated by jploot:jplootize");
			}
			Resource resource = new Resource();
			resource.setDirectory(outputDirectory);
			resource.addInclude("**/*");
			project.addResource(resource);
		} catch (RuntimeException | IOException e) {
			throw new MojoExecutionException("Unexpected failure", e);
		}
	}

	private void createDirIfNotExists(Path manifestFilePath) {
		File manifestDirFile = manifestFilePath.getParent().toFile();
		if (!manifestDirFile.isDirectory()) {
			manifestDirFile.mkdirs();
		}
	}

}
